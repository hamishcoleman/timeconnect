#!/usr/bin/perl -w
use warnings;
use strict;
#
# Attempt a connection to a remote host and time the response
#

our $VERSION=1.1;

use Socket;
use FileHandle;
use Time::HiRes;
use Getopt::Long;
use Pod::Usage;
use Carp;
use English qw( -no_match_vars );
use Switch 'Perl 6';

my $option={
	interval => 1,
	port => 80,
};
GetOptions($option,
	'help|h|?',
	'man',
	'count|c=i',
	'interval|i=i',
	'port|p=i'
) or pod2usage(2);
if($option->{help}){pod2usage(-exitstatus => 0, -verbose => 1)};
if($option->{man}){pod2usage(-exitstatus => 0, -verbose => 2)};
if(!defined $ARGV[0]){pod2usage(-exitstatus => 0, -verbose => 0)};
$option->{host} = $ARGV[0];

my $stats={
	totalwait => 0, 
	received => 0,
	min => 0,
	max => 0,
	attempts => 0
};

$OUTPUT_AUTOFLUSH=1;

my $fh    = FileHandle->new;

my $dest->{iaddr} = inet_aton($option->{host});
$dest->{paddr} = sockaddr_in($option->{port}, $dest->{iaddr});
$dest->{proto} = getprotobyname('tcp');

sub checkconnect{
	# check for local socket
	if (!socket($fh, PF_INET, SOCK_STREAM, $dest->{proto})) {
		return -1;
	}
	# check for remote socket
	if (!connect($fh, $dest->{paddr})) {
		return -2;
	}
	close $fh;
	return 0;
};

sub printstats{
	$stats->{runstoptime} = time;

	my $milliavg = 1000*($stats->{totalwait} / $stats->{attempts});
	my $percentfail = 100*(($stats->{attempts} - $stats->{received}) / $stats->{attempts});
	my $millimin = 1000*$stats->{min}; # milliseconds
	my $millimax = 1000*$stats->{max}; # milliseconds

	print "\n--- $option->{host} timeconnect statistics ---\n";
	printf "%d attempts, %d connects, %d%% failed, %d sec total run time\n",
		$stats->{attempts}, $stats->{received}, $percentfail, 
		($stats->{runstoptime} - $stats->{runstarttime});
	printf "min/max/avg = %.2f/%.2f/%.2f ms\n",
		$millimin, $millimax, $milliavg;

	return;
};

# ctrl+c ends script before time, finishes while loop on current run
sub sigint {
	$option->{count} = 1;
	return;
};
$SIG{INT}=\&sigint;

# ctrl+z prints stats but doesn't stop the script
sub sigtstp {
	printstats();
	return;
};
$SIG{TSTP}=\&sigtstp;


# Heading to 'make it look more like ping', but really to gobble up the new 
# prepended \n in the main printf on the first run
printf "TIMECONNECT %s (%s)", $option->{host}, inet_ntoa($dest->{iaddr});
if (defined $option->{count}){print " for $option->{count} attempts"};

#main loop
$stats->{runstarttime} = time;
while (!defined $option->{count} || $stats->{attempts} < $option->{count}){
	
	printf "\n%s %s:%d\t%s\t",
		"". localtime time, $option->{host}, $option->{port},
		inet_ntoa($dest->{iaddr});

	my $time1 = Time::HiRes::time;

	my $connstat = checkconnect();

	# $fh->autoflush(1);

	my $elapsed = Time::HiRes::time - $time1;
	my $milliseconds = $elapsed*1000;

	given($connstat) {
		when (0) { printf "%.3g ms", $milliseconds;}
		when (-1) { print "socket error";}
		when (-2) { print "connect error";}
	};

	if($connstat == 0){
		$stats->{totalwait} += $elapsed;
		$stats->{received}++;
		if($elapsed < $stats->{min} || $stats->{min} == 0){ 
			$stats->{min} = $elapsed;
		};
		if($elapsed > $stats->{max} ){ 
			$stats->{max} = $elapsed; 
		};
	};

	$stats->{attempts}++;

	# easily allow only one probe per second
	# last iteration of a limited run should not delay prompt
	# (last item nowait currently disabled)
	if ($elapsed < $option->{interval}) {
		Time::HiRes::sleep($option->{interval}-$elapsed);
	};

};

printstats();

0;
__END__
=head1 NAME

timeconnect - times connections to TCP socket

=head1 USAGE

timeconnect [--help] [--man] [--count X] [--interval X] [--port X] destination

timeconnect [-h] [-c X] [-i X] [-p X] destination 

timeconnect -c 20 -i 3 -p 80 192.168.1.1

timeconnect www.101spares.com

=head1 DESCRIPTION

Timeconnect attempts a tcp connection to the given destination and times the response. The destination can be in the form of an IP address or an FQDN and the port must also be declared.

The user can specify the time between attempts and the total count of connections to attempt. If these values are not specified, timeconnect will run continuously with a minimum interval of one second between attempts.

=head1 ARGUMENTS

Timeconnect takes the following arguments:

=over 4

=item B<--count, -c> Repeats the connection test for COUNT attempts. If this value is not specified, timeconnect will run continuously

=item B<--help, -h>	Displays the usage message

=item B<--interval, -i>	Sets the interval in seconds between connection tests. If this value is not specified, timeconnect will default to an interval of 1.

=item B<--port, -p> Sets the destination port to use. If this value is not specificed, timeconnect will default to a port of 80 (standard http)

=back

=head1 INTERRUPTS

=over 4

=item B<CTRL-C / SIGINT> Prints statistics and ends the program

=item B<CTRL-D / SIGTSTP> Prints statistics but leaves the program running

=head1 AUTHOR

Hamish Coleman (meat) and Paul Morahan (potatoes)

=head1 HISTORY

Paul made the mistake of submitting a trivial change and was invited to write the potatoes instead

=cut



