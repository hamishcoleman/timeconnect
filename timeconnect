#!/usr/bin/perl -w
use warnings;
use strict;
#
# Attempt a connection to a remote host and time the response
#

use Socket;
use FileHandle;
use Time::HiRes;
use Getopt::Long;


my %options=();
my $count = 1; 
my $iteration = 1;
my $interval = 1;
GetOptions(\%options,
	"help|h",
	"count|c=i",
	"interval|i=i"
);

$count = $options{count} if defined $options{count};
$interval = $options{interval} if defined $options{interval};

if(defined($options{help}) || !defined $ARGV[0]) {
print <<EOF;

Timeconnect attempts a tcp connection to the given destination and times the
response. The destination can be in the form of an IP address or an FQDN

Timeconnect will not attempt more than once per second

Usage:
	timeconnect [-ch] [count]  destination port
	timeconnect -c 20 192.168.1.1 80
	timeconnect www.101spares.com

	--help calls this usage page
	--count will repeat for the given number of iterations. 
	--interval changes the interval between the attempts to X seconds
EOF
exit 0;
}


## debugging
#print "Recurse is set to $count\n";
#print "-r $options{r}\n" if defined $options{r};
#print "-R $options{R}\n" if defined $options{R};

#$count = $options{r} if defined $options{r};
#$count = 0 if defined $options{R}; # if both are called, R takes precedence


my ($rem_host, $rem_port) = ($ARGV[0], $ARGV[1]);

$| = 1;

if(defined($options{r})) {
		if ($options{r} == int($options{r}) && $options{r} > -1){} else {
			die "Recurse switch called without an integer >= 0";
		};
};
$rem_host || die "Remote host not supplied";
$rem_port || die "Remote port not supplied";


my $iaddr = inet_aton($rem_host);
my $paddr = sockaddr_in($rem_port, $iaddr);
my $proto = getprotobyname('tcp');
my $fh    = new FileHandle;

sub checkconnect{
		my $time1 = Time::HiRes::time;
		if (!socket($fh, PF_INET, SOCK_STREAM, $proto)) {
		die "socket error";
		}
		if (!connect($fh, $paddr)) {
			die "connect error";
		}
		$fh->autoflush(1);
		my $elapsed = Time::HiRes::time - $time1;
		my $milliseconds = $elapsed*1000;
		print "". localtime time, ' ',
			$rem_host, ':', $rem_port, "\t",
			inet_ntoa($iaddr), "\t";
		printf '%.2f', $milliseconds;
		print " ms\n";

## Stanza for seconds instead of milliseconds
#		print "". localtime time, ' ',
#			$rem_host, ':', $rem_port, "\t",
#			inet_ntoa($iaddr), "\t";
#		printf '%.4f', $elapsed;
#		print " seconds\n";
	
		# easily allow only one probe per second
		# last iteration of a limited run should not delay
		if ($iteration < $count || !defined $options{count} ){
			if ($elapsed < $interval) {
				Time::HiRes::sleep($interval-$elapsed);
			}
		}

}


while ($iteration <= $count){
	checkconnect();
	if(defined($options{count})){
		$iteration++;

	};

};


0;



