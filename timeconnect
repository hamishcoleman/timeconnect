#!/usr/bin/perl -w
use warnings;
use strict;
#
# Attempt a connection to a remote host and time the response
#

use Socket;
use FileHandle;
use Time::HiRes;
use Getopt::Std;


my %options=();
getopts("hRr:", \%options);
my $recurse = 1; # target number for iterations, 0 = don't stop
my $iteration = 1;

if(defined($options{h})){
print <<EOF;

Timeconnect attempts a tcp connection to the given destination and times the
response. The destination can be in the form of an IP address or an FQDN

Timeconnect will not attempt more than once per second

Usage:
	timeconnect [-hrR] destination port
	timeconnect -r 20 192.168.1.1 80
	timeconnect -R www.101spares.com

	-h calls this usage page
	-r will repeat for the given number of iterations. 
	   Calling -r with 0 allows continuous repeats
	-R will repeat continuously

EOF
exit 0;
}


## debugging
#print "Recurse is set to $recurse\n";
#print "-r $options{r}\n" if defined $options{r};
#print "-R $options{R}\n" if defined $options{R};

$recurse = $options{r} if defined $options{r};
$recurse = 0 if defined $options{R}; # if both are called, R takes precedence


my ($rem_host, $rem_port) = ($ARGV[0], $ARGV[1]);

$| = 1;

if(defined($options{r})) {
		if ($options{r} == int($options{r}) && $options{r} > -1){} else {
			die "Recurse switch called without an integer >= 0";
		};
};
$rem_host || die "Remote host not supplied";
$rem_port || die "Remote port not supplied";


my $iaddr = inet_aton($rem_host);
my $paddr = sockaddr_in($rem_port, $iaddr);
my $proto = getprotobyname('tcp');
my $fh    = new FileHandle;


while ($iteration > $recurse){
	&checkconnect();
};

while ($iteration <= $recurse){
	&checkconnect();
	$iteration++;
};

0;


sub checkconnect{
		my $time1 = Time::HiRes::time;
		if (!socket($fh, PF_INET, SOCK_STREAM, $proto)) {
			die "socket error";
		}
		if (!connect($fh, $paddr)) {
			die "connect error";
		}
		$fh->autoflush(1);
		my $elapsed = Time::HiRes::time - $time1;

		print "". localtime time, ' ',
			$rem_host, ':', $rem_port, "\t",
			inet_ntoa($iaddr), "\t",
			"$elapsed seconds\n";

		# easily allow only one probe per secons
		if ($elapsed <1) {
			Time::HiRes::sleep(1-$elapsed);
		}
}

